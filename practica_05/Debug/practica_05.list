
practica_05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023d8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002584  08002584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025a4  080025a4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080025a4  080025a4  000125a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025ac  080025ac  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025ac  080025ac  000125ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025b0  080025b0  000125b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080025b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          0000007c  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000110  20000110  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000088f8  00000000  00000000  00020107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ab4  00000000  00000000  000289ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007a0  00000000  00000000  0002a4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005b7  00000000  00000000  0002ac58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025a75  00000000  00000000  0002b20f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c5cc  00000000  00000000  00050c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e15b0  00000000  00000000  0005d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001c74  00000000  00000000  0013e800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00140474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000094 	.word	0x20000094
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800256c 	.word	0x0800256c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000098 	.word	0x20000098
 80001e8:	0800256c 	.word	0x0800256c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <debounce_FSM_init>:

/* Private function prototypes -----------------------------------------------*/
static void FSM_error_handler(void);

/* Public functions ---------------------------------------------------------*/
void debounce_FSM_init(uint32_t time) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	current_state = BUTTON_UP;
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <debounce_FSM_init+0x54>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
	debounce_time = (time == 0) ? DEFAULT_DEBOUNCE_TIME : time;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <debounce_FSM_init+0x18>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	e000      	b.n	8000502 <debounce_FSM_init+0x1a>
 8000500:	2328      	movs	r3, #40	; 0x28
 8000502:	4a0f      	ldr	r2, [pc, #60]	; (8000540 <debounce_FSM_init+0x58>)
 8000504:	6013      	str	r3, [r2, #0]
	rising_edge = false;
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <debounce_FSM_init+0x5c>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]

	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800050c:	2100      	movs	r1, #0
 800050e:	2000      	movs	r0, #0
 8000510:	f000 f9ea 	bl	80008e8 <BSP_PB_Init>
	delay_init(&debounce_timer, debounce_time);
 8000514:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <debounce_FSM_init+0x58>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4619      	mov	r1, r3
 800051a:	480b      	ldr	r0, [pc, #44]	; (8000548 <debounce_FSM_init+0x60>)
 800051c:	f000 f8a5 	bl	800066a <delay_init>
	if(!uart_init()){
 8000520:	f000 f90c 	bl	800073c <uart_init>
 8000524:	4603      	mov	r3, r0
 8000526:	f083 0301 	eor.w	r3, r3, #1
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <debounce_FSM_init+0x4c>
		FSM_error_handler();
 8000530:	f000 f892 	bl	8000658 <FSM_error_handler>
	}
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200000b0 	.word	0x200000b0
 8000540:	200000b4 	.word	0x200000b4
 8000544:	200000c4 	.word	0x200000c4
 8000548:	200000b8 	.word	0x200000b8

0800054c <debounce_FSM_update>:

void debounce_FSM_update() {
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	switch (current_state) {
 8000550:	4b30      	ldr	r3, [pc, #192]	; (8000614 <debounce_FSM_update+0xc8>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b03      	cmp	r3, #3
 8000556:	d850      	bhi.n	80005fa <debounce_FSM_update+0xae>
 8000558:	a201      	add	r2, pc, #4	; (adr r2, 8000560 <debounce_FSM_update+0x14>)
 800055a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055e:	bf00      	nop
 8000560:	08000571 	.word	0x08000571
 8000564:	0800058b 	.word	0x0800058b
 8000568:	080005b9 	.word	0x080005b9
 800056c:	080005d3 	.word	0x080005d3
		case BUTTON_UP:
			if(BSP_PB_GetState(BUTTON_USER)) {
 8000570:	2000      	movs	r0, #0
 8000572:	f000 fa0f 	bl	8000994 <BSP_PB_GetState>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d041      	beq.n	8000600 <debounce_FSM_update+0xb4>
				current_state = BUTTON_FALLING;
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <debounce_FSM_update+0xc8>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
				uart_send_string(msg_falling_edge);
 8000582:	4825      	ldr	r0, [pc, #148]	; (8000618 <debounce_FSM_update+0xcc>)
 8000584:	f000 f90a 	bl	800079c <uart_send_string>
			}
			break;
 8000588:	e03a      	b.n	8000600 <debounce_FSM_update+0xb4>

		case BUTTON_FALLING:
			if (delay_read(&debounce_timer)) {
 800058a:	4824      	ldr	r0, [pc, #144]	; (800061c <debounce_FSM_update+0xd0>)
 800058c:	f000 f888 	bl	80006a0 <delay_read>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d036      	beq.n	8000604 <debounce_FSM_update+0xb8>
				if(BSP_PB_GetState(BUTTON_USER)) {
 8000596:	2000      	movs	r0, #0
 8000598:	f000 f9fc 	bl	8000994 <BSP_PB_GetState>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d006      	beq.n	80005b0 <debounce_FSM_update+0x64>
					current_state = BUTTON_DOWN;
 80005a2:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <debounce_FSM_update+0xc8>)
 80005a4:	2202      	movs	r2, #2
 80005a6:	701a      	strb	r2, [r3, #0]
					rising_edge = true;
 80005a8:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <debounce_FSM_update+0xd4>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
				} else {
					current_state = BUTTON_UP;
				}
			}
			break;
 80005ae:	e029      	b.n	8000604 <debounce_FSM_update+0xb8>
					current_state = BUTTON_UP;
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <debounce_FSM_update+0xc8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
			break;
 80005b6:	e025      	b.n	8000604 <debounce_FSM_update+0xb8>

		case BUTTON_DOWN:
			if(!BSP_PB_GetState(BUTTON_USER)) {
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 f9eb 	bl	8000994 <BSP_PB_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d121      	bne.n	8000608 <debounce_FSM_update+0xbc>
				current_state = BUTTON_RAISING;
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <debounce_FSM_update+0xc8>)
 80005c6:	2203      	movs	r2, #3
 80005c8:	701a      	strb	r2, [r3, #0]
				uart_send_string(msg_rising_edge);
 80005ca:	4816      	ldr	r0, [pc, #88]	; (8000624 <debounce_FSM_update+0xd8>)
 80005cc:	f000 f8e6 	bl	800079c <uart_send_string>
			}
			break;
 80005d0:	e01a      	b.n	8000608 <debounce_FSM_update+0xbc>

		case BUTTON_RAISING:
			if (delay_read(&debounce_timer)) {
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <debounce_FSM_update+0xd0>)
 80005d4:	f000 f864 	bl	80006a0 <delay_read>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d016      	beq.n	800060c <debounce_FSM_update+0xc0>
				if(!BSP_PB_GetState(BUTTON_USER)) {
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 f9d8 	bl	8000994 <BSP_PB_GetState>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d103      	bne.n	80005f2 <debounce_FSM_update+0xa6>
					current_state = BUTTON_UP;
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <debounce_FSM_update+0xc8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
				} else {
					current_state = BUTTON_DOWN;
				}
			}
			break;
 80005f0:	e00c      	b.n	800060c <debounce_FSM_update+0xc0>
					current_state = BUTTON_DOWN;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <debounce_FSM_update+0xc8>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	701a      	strb	r2, [r3, #0]
			break;
 80005f8:	e008      	b.n	800060c <debounce_FSM_update+0xc0>

		default:
			FSM_error_handler();
 80005fa:	f000 f82d 	bl	8000658 <FSM_error_handler>
			break;
 80005fe:	e006      	b.n	800060e <debounce_FSM_update+0xc2>
			break;
 8000600:	bf00      	nop
 8000602:	e004      	b.n	800060e <debounce_FSM_update+0xc2>
			break;
 8000604:	bf00      	nop
 8000606:	e002      	b.n	800060e <debounce_FSM_update+0xc2>
			break;
 8000608:	bf00      	nop
 800060a:	e000      	b.n	800060e <debounce_FSM_update+0xc2>
			break;
 800060c:	bf00      	nop
	}
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000b0 	.word	0x200000b0
 8000618:	20000020 	.word	0x20000020
 800061c:	200000b8 	.word	0x200000b8
 8000620:	200000c4 	.word	0x200000c4
 8000624:	20000000 	.word	0x20000000

08000628 <read_key>:

bool_t read_key() {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
	bool_t return_value = false;
 800062e:	2300      	movs	r3, #0
 8000630:	71fb      	strb	r3, [r7, #7]

	if (rising_edge) {
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <read_key+0x2c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d004      	beq.n	8000644 <read_key+0x1c>
		rising_edge = false;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <read_key+0x2c>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
		return_value = true;
 8000640:	2301      	movs	r3, #1
 8000642:	71fb      	strb	r3, [r7, #7]
	}

	return return_value;
 8000644:	79fb      	ldrb	r3, [r7, #7]
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200000c4 	.word	0x200000c4

08000658 <FSM_error_handler>:
 * @brief  This function is executed in case of error occurrence.
 *
 * @param  None
 * @retval None
 */
static void FSM_error_handler(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_Init(LED2);
 800065c:	2001      	movs	r0, #1
 800065e:	f000 f8bf 	bl	80007e0 <BSP_LED_Init>
	BSP_LED_On(LED2);
 8000662:	2001      	movs	r0, #1
 8000664:	f000 f90c 	bl	8000880 <BSP_LED_On>
	while (1)
 8000668:	e7fe      	b.n	8000668 <FSM_error_handler+0x10>

0800066a <delay_init>:
#include "API_delay.h"

void delay_init(delay_t *delay, tick_t duration) {
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	6039      	str	r1, [r7, #0]
	if ((delay == NULL) || (duration == 0))
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00c      	beq.n	8000694 <delay_init+0x2a>
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d009      	beq.n	8000694 <delay_init+0x2a>
		return;

	delay->duration = duration;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2200      	movs	r2, #0
 800068a:	721a      	strb	r2, [r3, #8]
	delay->start_time = 0;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	e000      	b.n	8000696 <delay_init+0x2c>
		return;
 8000694:	bf00      	nop
}
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <delay_read>:


bool_t delay_read(delay_t *delay) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	uint32_t elapsed_time = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
	bool_t return_value = false;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]

	if (delay == NULL)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d101      	bne.n	80006ba <delay_read+0x1a>
		return return_value;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	e021      	b.n	80006fe <delay_read+0x5e>

	if (delay->running == false) {
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7a1b      	ldrb	r3, [r3, #8]
 80006be:	f083 0301 	eor.w	r3, r3, #1
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d008      	beq.n	80006da <delay_read+0x3a>
		delay->start_time = HAL_GetTick();
 80006c8:	f000 fa3e 	bl	8000b48 <HAL_GetTick>
 80006cc:	4602      	mov	r2, r0
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2201      	movs	r2, #1
 80006d6:	721a      	strb	r2, [r3, #8]
 80006d8:	e010      	b.n	80006fc <delay_read+0x5c>
	} else {
		elapsed_time = HAL_GetTick() - delay->start_time;
 80006da:	f000 fa35 	bl	8000b48 <HAL_GetTick>
 80006de:	4602      	mov	r2, r0
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	60bb      	str	r3, [r7, #8]
		if (elapsed_time >= delay->duration) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d304      	bcc.n	80006fc <delay_read+0x5c>
			delay->running = false;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2200      	movs	r2, #0
 80006f6:	721a      	strb	r2, [r3, #8]
			return_value = true;
 80006f8:	2301      	movs	r3, #1
 80006fa:	73fb      	strb	r3, [r7, #15]
		}
	}

	return return_value;
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <delay_write>:


void delay_write(delay_t *delay, tick_t duration) {
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
 800070e:	6039      	str	r1, [r7, #0]
	if ((delay == NULL) || (duration == 0))
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d00c      	beq.n	8000730 <delay_write+0x2a>
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d009      	beq.n	8000730 <delay_write+0x2a>
		return;

	delay->duration = duration;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2200      	movs	r2, #0
 8000726:	721a      	strb	r2, [r3, #8]
	delay->start_time = 0;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	e000      	b.n	8000732 <delay_write+0x2c>
		return;
 8000730:	bf00      	nop
}
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <uart_init>:

static UART_HandleTypeDef UartHandle;
static uint8_t msg_uart_init[] = MSG_UART_INIT;


bool_t uart_init() {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

	  UartHandle.Instance        	= USARTx;
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <uart_init+0x54>)
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <uart_init+0x58>)
 8000744:	601a      	str	r2, [r3, #0]
	  UartHandle.Init.BaudRate   	= BAUDRATE;
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <uart_init+0x54>)
 8000748:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800074c:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength	= UART_WORDLENGTH_8B;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <uart_init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   	= UART_STOPBITS_1;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <uart_init+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     	= UART_PARITY_ODD;
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <uart_init+0x54>)
 800075c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000760:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  	= UART_HWCONTROL_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <uart_init+0x54>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       	= UART_MODE_TX_RX;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <uart_init+0x54>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling 	= UART_OVERSAMPLING_16;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <uart_init+0x54>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]


	  if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 8000774:	4806      	ldr	r0, [pc, #24]	; (8000790 <uart_init+0x54>)
 8000776:	f001 fa3f 	bl	8001bf8 <HAL_UART_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <uart_init+0x48>
		  return false;
 8000780:	2300      	movs	r3, #0
 8000782:	e003      	b.n	800078c <uart_init+0x50>
	  }

	  uart_send_string(msg_uart_init);
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <uart_init+0x5c>)
 8000786:	f000 f809 	bl	800079c <uart_send_string>

	  return true;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200000c8 	.word	0x200000c8
 8000794:	40004800 	.word	0x40004800
 8000798:	20000040 	.word	0x20000040

0800079c <uart_send_string>:


void uart_send_string(uint8_t * pstring) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	uint32_t size = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]

	if(pstring == NULL) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d012      	beq.n	80007d4 <uart_send_string+0x38>
		return;
	}

	for(; pstring[size] != '\0'; size++ );
 80007ae:	e002      	b.n	80007b6 <uart_send_string+0x1a>
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3301      	adds	r3, #1
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	4413      	add	r3, r2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1f6      	bne.n	80007b0 <uart_send_string+0x14>
	HAL_UART_Transmit(&UartHandle, pstring, size, 1000);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <uart_send_string+0x40>)
 80007ce:	f001 fa60 	bl	8001c92 <HAL_UART_Transmit>
 80007d2:	e000      	b.n	80007d6 <uart_send_string+0x3a>
		return;
 80007d4:	bf00      	nop
}
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000c8 	.word	0x200000c8

080007e0 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d10e      	bne.n	800080e <BSP_LED_Init+0x2e>
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <BSP_LED_Init+0x94>)
 80007f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f8:	4a1e      	ldr	r2, [pc, #120]	; (8000874 <BSP_LED_Init+0x94>)
 80007fa:	f043 0302 	orr.w	r3, r3, #2
 80007fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <BSP_LED_Init+0x94>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000804:	f003 0302 	and.w	r3, r3, #2
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	e00d      	b.n	800082a <BSP_LED_Init+0x4a>
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <BSP_LED_Init+0x94>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a17      	ldr	r2, [pc, #92]	; (8000874 <BSP_LED_Init+0x94>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <BSP_LED_Init+0x94>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	4a12      	ldr	r2, [pc, #72]	; (8000878 <BSP_LED_Init+0x98>)
 800082e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800083c:	2302      	movs	r3, #2
 800083e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <BSP_LED_Init+0x9c>)
 8000844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000848:	f107 0214 	add.w	r2, r7, #20
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fa98 	bl	8000d84 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4a09      	ldr	r2, [pc, #36]	; (800087c <BSP_LED_Init+0x9c>)
 8000858:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4a06      	ldr	r2, [pc, #24]	; (8000878 <BSP_LED_Init+0x98>)
 8000860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000864:	2200      	movs	r2, #0
 8000866:	4619      	mov	r1, r3
 8000868:	f000 fc50 	bl	800110c <HAL_GPIO_WritePin>
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	08002584 	.word	0x08002584
 800087c:	2000006c 	.word	0x2000006c

08000880 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <BSP_LED_On+0x2c>)
 800088e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <BSP_LED_On+0x30>)
 8000896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800089a:	2201      	movs	r2, #1
 800089c:	4619      	mov	r1, r3
 800089e:	f000 fc35 	bl	800110c <HAL_GPIO_WritePin>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000006c 	.word	0x2000006c
 80008b0:	08002584 	.word	0x08002584

080008b4 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <BSP_LED_Toggle+0x2c>)
 80008c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	4906      	ldr	r1, [pc, #24]	; (80008e4 <BSP_LED_Toggle+0x30>)
 80008ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008ce:	4619      	mov	r1, r3
 80008d0:	4610      	mov	r0, r2
 80008d2:	f000 fc34 	bl	800113e <HAL_GPIO_TogglePin>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000006c 	.word	0x2000006c
 80008e4:	08002584 	.word	0x08002584

080008e8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	460a      	mov	r2, r1
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	4b23      	ldr	r3, [pc, #140]	; (800098c <BSP_PB_Init+0xa4>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	4a22      	ldr	r2, [pc, #136]	; (800098c <BSP_PB_Init+0xa4>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6313      	str	r3, [r2, #48]	; 0x30
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <BSP_PB_Init+0xa4>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000914:	79bb      	ldrb	r3, [r7, #6]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d112      	bne.n	8000940 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800091a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000924:	2302      	movs	r3, #2
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000928:	2302      	movs	r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	4a18      	ldr	r2, [pc, #96]	; (8000990 <BSP_PB_Init+0xa8>)
 8000930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000934:	f107 020c 	add.w	r2, r7, #12
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fa22 	bl	8000d84 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d11d      	bne.n	8000982 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000950:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000954:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <BSP_PB_Init+0xa8>)
 800095a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095e:	f107 020c 	add.w	r2, r7, #12
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fa0d 	bl	8000d84 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800096a:	2328      	movs	r3, #40	; 0x28
 800096c:	b25b      	sxtb	r3, r3
 800096e:	2200      	movs	r2, #0
 8000970:	210f      	movs	r1, #15
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f9cf 	bl	8000d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000978:	2328      	movs	r3, #40	; 0x28
 800097a:	b25b      	sxtb	r3, r3
 800097c:	4618      	mov	r0, r3
 800097e:	f000 f9e6 	bl	8000d4e <HAL_NVIC_EnableIRQ>
  }
}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	20000078 	.word	0x20000078

08000994 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <BSP_PB_GetState+0x28>)
 80009a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fb95 	bl	80010dc <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000078 	.word	0x20000078

080009c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <SystemInit+0x60>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <SystemInit+0x60>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <SystemInit+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <SystemInit+0x64>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <SystemInit+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <SystemInit+0x64>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <SystemInit+0x64>)
 80009ec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <SystemInit+0x64>)
 80009f8:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <SystemInit+0x68>)
 80009fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <SystemInit+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <SystemInit+0x64>)
 8000a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <SystemInit+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SystemInit+0x60>)
 8000a10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a14:	609a      	str	r2, [r3, #8]
#endif
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00
 8000a24:	40023800 	.word	0x40023800
 8000a28:	24003010 	.word	0x24003010

08000a2c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000a80:	f000 f84e 	bl	8000b20 <HAL_IncTick>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_Init+0x34>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_Init+0x34>)
 8000a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a96:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_Init+0x34>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_Init+0x34>)
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f000 f92b 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aaa:	200f      	movs	r0, #15
 8000aac:	f000 f808 	bl	8000ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab0:	f000 fbb2 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023c00 	.word	0x40023c00

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x54>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x58>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f943 	bl	8000d6a <HAL_SYSTICK_Config>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00e      	b.n	8000b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d80a      	bhi.n	8000b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afc:	f000 f90b 	bl	8000d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <HAL_InitTick+0x5c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e000      	b.n	8000b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000007c 	.word	0x2000007c
 8000b18:	20000084 	.word	0x20000084
 8000b1c:	20000080 	.word	0x20000080

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x20>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_IncTick+0x24>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000084 	.word	0x20000084
 8000b44:	2000010c 	.word	0x2000010c

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	2000010c 	.word	0x2000010c

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4907      	ldr	r1, [pc, #28]	; (8000bfc <__NVIC_EnableIRQ+0x38>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ccc:	d301      	bcc.n	8000cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00f      	b.n	8000cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <SysTick_Config+0x40>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cda:	210f      	movs	r1, #15
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce0:	f7ff ff8e 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SysTick_Config+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <SysTick_Config+0x40>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff29 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff3e 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ff8e 	bl	8000c54 <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff5d 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff31 	bl	8000bc4 <__NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffa2 	bl	8000cbc <SysTick_Config>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	e177      	b.n	8001090 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	f040 8166 	bne.w	800108a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d005      	beq.n	8000dd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d130      	bne.n	8000e38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	f003 0201 	and.w	r2, r3, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d017      	beq.n	8000e74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d123      	bne.n	8000ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	69b9      	ldr	r1, [r7, #24]
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0203 	and.w	r2, r3, #3
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80c0 	beq.w	800108a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b66      	ldr	r3, [pc, #408]	; (80010a8 <HAL_GPIO_Init+0x324>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	4a65      	ldr	r2, [pc, #404]	; (80010a8 <HAL_GPIO_Init+0x324>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f18:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1a:	4b63      	ldr	r3, [pc, #396]	; (80010a8 <HAL_GPIO_Init+0x324>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f26:	4a61      	ldr	r2, [pc, #388]	; (80010ac <HAL_GPIO_Init+0x328>)
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a58      	ldr	r2, [pc, #352]	; (80010b0 <HAL_GPIO_Init+0x32c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d037      	beq.n	8000fc2 <HAL_GPIO_Init+0x23e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a57      	ldr	r2, [pc, #348]	; (80010b4 <HAL_GPIO_Init+0x330>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d031      	beq.n	8000fbe <HAL_GPIO_Init+0x23a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d02b      	beq.n	8000fba <HAL_GPIO_Init+0x236>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a55      	ldr	r2, [pc, #340]	; (80010bc <HAL_GPIO_Init+0x338>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d025      	beq.n	8000fb6 <HAL_GPIO_Init+0x232>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a54      	ldr	r2, [pc, #336]	; (80010c0 <HAL_GPIO_Init+0x33c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01f      	beq.n	8000fb2 <HAL_GPIO_Init+0x22e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a53      	ldr	r2, [pc, #332]	; (80010c4 <HAL_GPIO_Init+0x340>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d019      	beq.n	8000fae <HAL_GPIO_Init+0x22a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a52      	ldr	r2, [pc, #328]	; (80010c8 <HAL_GPIO_Init+0x344>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0x226>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a51      	ldr	r2, [pc, #324]	; (80010cc <HAL_GPIO_Init+0x348>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x222>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a50      	ldr	r2, [pc, #320]	; (80010d0 <HAL_GPIO_Init+0x34c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x21e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4f      	ldr	r2, [pc, #316]	; (80010d4 <HAL_GPIO_Init+0x350>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x21a>
 8000f9a:	2309      	movs	r3, #9
 8000f9c:	e012      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	e010      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	e00e      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	e00c      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000faa:	2306      	movs	r3, #6
 8000fac:	e00a      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fae:	2305      	movs	r3, #5
 8000fb0:	e008      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e004      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	f002 0203 	and.w	r2, r2, #3
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	4093      	lsls	r3, r2
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd4:	4935      	ldr	r1, [pc, #212]	; (80010ac <HAL_GPIO_Init+0x328>)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe2:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <HAL_GPIO_Init+0x354>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001006:	4a34      	ldr	r2, [pc, #208]	; (80010d8 <HAL_GPIO_Init+0x354>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800100c:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <HAL_GPIO_Init+0x354>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001030:	4a29      	ldr	r2, [pc, #164]	; (80010d8 <HAL_GPIO_Init+0x354>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <HAL_GPIO_Init+0x354>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800105a:	4a1f      	ldr	r2, [pc, #124]	; (80010d8 <HAL_GPIO_Init+0x354>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <HAL_GPIO_Init+0x354>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <HAL_GPIO_Init+0x354>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3301      	adds	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	f67f ae84 	bls.w	8000da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40013800 	.word	0x40013800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40021400 	.word	0x40021400
 80010c8:	40021800 	.word	0x40021800
 80010cc:	40021c00 	.word	0x40021c00
 80010d0:	40022000 	.word	0x40022000
 80010d4:	40022400 	.word	0x40022400
 80010d8:	40013c00 	.word	0x40013c00

080010dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e001      	b.n	80010fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001128:	e003      	b.n	8001132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	041a      	lsls	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	619a      	str	r2, [r3, #24]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800113e:	b480      	push	{r7}
 8001140:	b085      	sub	sp, #20
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001150:	887a      	ldrh	r2, [r7, #2]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4013      	ands	r3, r2
 8001156:	041a      	lsls	r2, r3, #16
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43d9      	mvns	r1, r3
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	400b      	ands	r3, r1
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	619a      	str	r2, [r3, #24]
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	4b23      	ldr	r3, [pc, #140]	; (8001210 <HAL_UART_MspInit+0x9c>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	4a22      	ldr	r2, [pc, #136]	; (8001210 <HAL_UART_MspInit+0x9c>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	6313      	str	r3, [r2, #48]	; 0x30
 800118c:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_UART_MspInit+0x9c>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <HAL_UART_MspInit+0x9c>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <HAL_UART_MspInit+0x9c>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_UART_MspInit+0x9c>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_UART_MspInit+0x9c>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <HAL_UART_MspInit+0x9c>)
 80011be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c2:	6413      	str	r3, [r2, #64]	; 0x40
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_UART_MspInit+0x9c>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80011d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80011da:	2301      	movs	r3, #1
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80011e2:	2307      	movs	r3, #7
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <HAL_UART_MspInit+0xa0>)
 80011ee:	f7ff fdc9 	bl	8000d84 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80011f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80011f8:	2307      	movs	r3, #7
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <HAL_UART_MspInit+0xa0>)
 8001204:	f7ff fdbe 	bl	8000d84 <HAL_GPIO_Init>
}
 8001208:	bf00      	nop
 800120a:	3728      	adds	r7, #40	; 0x28
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40023800 	.word	0x40023800
 8001214:	40020c00 	.word	0x40020c00

08001218 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a1f      	ldr	r2, [pc, #124]	; (80012b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_PWREx_EnableOverDrive+0x94>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001254:	f7ff fc78 	bl	8000b48 <HAL_GetTick>
 8001258:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800125a:	e009      	b.n	8001270 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800125c:	f7ff fc74 	bl	8000b48 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800126a:	d901      	bls.n	8001270 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e01f      	b.n	80012b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127c:	d1ee      	bne.n	800125c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001280:	2201      	movs	r2, #1
 8001282:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001284:	f7ff fc60 	bl	8000b48 <HAL_GetTick>
 8001288:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800128a:	e009      	b.n	80012a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800128c:	f7ff fc5c 	bl	8000b48 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800129a:	d901      	bls.n	80012a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e007      	b.n	80012b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012ac:	d1ee      	bne.n	800128c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	420e0040 	.word	0x420e0040
 80012c0:	40007000 	.word	0x40007000
 80012c4:	420e0044 	.word	0x420e0044

080012c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e267      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d075      	beq.n	80013d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d00c      	beq.n	800130c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b85      	ldr	r3, [pc, #532]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d112      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fe:	4b82      	ldr	r3, [pc, #520]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800130a:	d10b      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	4b7e      	ldr	r3, [pc, #504]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d05b      	beq.n	80013d0 <HAL_RCC_OscConfig+0x108>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d157      	bne.n	80013d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e242      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132c:	d106      	bne.n	800133c <HAL_RCC_OscConfig+0x74>
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a75      	ldr	r2, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e01d      	b.n	8001378 <HAL_RCC_OscConfig+0xb0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x98>
 8001346:	4b70      	ldr	r3, [pc, #448]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6f      	ldr	r2, [pc, #444]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6c      	ldr	r2, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0xb0>
 8001360:	4b69      	ldr	r3, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a68      	ldr	r2, [pc, #416]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b66      	ldr	r3, [pc, #408]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a65      	ldr	r2, [pc, #404]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fbe2 	bl	8000b48 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fbde 	bl	8000b48 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e207      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0xc0>
 80013a6:	e014      	b.n	80013d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fbce 	bl	8000b48 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fbca 	bl	8000b48 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1f3      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0xe8>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d063      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013de:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d11c      	bne.n	8001430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f6:	4b44      	ldr	r3, [pc, #272]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d116      	bne.n	8001430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001402:	4b41      	ldr	r3, [pc, #260]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <HAL_RCC_OscConfig+0x152>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e1c7      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141a:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4937      	ldr	r1, [pc, #220]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	e03a      	b.n	80014a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d020      	beq.n	800147a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <HAL_RCC_OscConfig+0x244>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143e:	f7ff fb83 	bl	8000b48 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fb7f 	bl	8000b48 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1a8      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4925      	ldr	r1, [pc, #148]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
 8001478:	e015      	b.n	80014a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_OscConfig+0x244>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fb62 	bl	8000b48 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff fb5e 	bl	8000b48 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e187      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d036      	beq.n	8001520 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d016      	beq.n	80014e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_RCC_OscConfig+0x248>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff fb42 	bl	8000b48 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff fb3e 	bl	8000b48 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e167      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80014dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x200>
 80014e6:	e01b      	b.n	8001520 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_OscConfig+0x248>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fb2b 	bl	8000b48 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	e00e      	b.n	8001514 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff fb27 	bl	8000b48 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d907      	bls.n	8001514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e150      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
 8001508:	40023800 	.word	0x40023800
 800150c:	42470000 	.word	0x42470000
 8001510:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	4b88      	ldr	r3, [pc, #544]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1ea      	bne.n	80014f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8097 	beq.w	800165c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001532:	4b81      	ldr	r3, [pc, #516]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b7d      	ldr	r3, [pc, #500]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a7c      	ldr	r2, [pc, #496]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b7a      	ldr	r3, [pc, #488]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b77      	ldr	r3, [pc, #476]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156a:	4b74      	ldr	r3, [pc, #464]	; (800173c <HAL_RCC_OscConfig+0x474>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a73      	ldr	r2, [pc, #460]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff fae7 	bl	8000b48 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff fae3 	bl	8000b48 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e10c      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b6a      	ldr	r3, [pc, #424]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2ea>
 80015a4:	4b64      	ldr	r3, [pc, #400]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a63      	ldr	r2, [pc, #396]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	e01c      	b.n	80015ec <HAL_RCC_OscConfig+0x324>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x30c>
 80015ba:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a5e      	ldr	r2, [pc, #376]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6713      	str	r3, [r2, #112]	; 0x70
 80015c6:	4b5c      	ldr	r3, [pc, #368]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	4a5b      	ldr	r2, [pc, #364]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6713      	str	r3, [r2, #112]	; 0x70
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0x324>
 80015d4:	4b58      	ldr	r3, [pc, #352]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a57      	ldr	r2, [pc, #348]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	4b55      	ldr	r3, [pc, #340]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a54      	ldr	r2, [pc, #336]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015e6:	f023 0304 	bic.w	r3, r3, #4
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d015      	beq.n	8001620 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7ff faa8 	bl	8000b48 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fc:	f7ff faa4 	bl	8000b48 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e0cb      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001612:	4b49      	ldr	r3, [pc, #292]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0ee      	beq.n	80015fc <HAL_RCC_OscConfig+0x334>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001620:	f7ff fa92 	bl	8000b48 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff fa8e 	bl	8000b48 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e0b5      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163e:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ee      	bne.n	8001628 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001650:	4b39      	ldr	r3, [pc, #228]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	4a38      	ldr	r2, [pc, #224]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80a1 	beq.w	80017a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b08      	cmp	r3, #8
 8001670:	d05c      	beq.n	800172c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d141      	bne.n	80016fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fa62 	bl	8000b48 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fa5e 	bl	8000b48 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e087      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69da      	ldr	r2, [r3, #28]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	3b01      	subs	r3, #1
 80016c0:	041b      	lsls	r3, r3, #16
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	491b      	ldr	r1, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fa37 	bl	8000b48 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff fa33 	bl	8000b48 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e05c      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x416>
 80016fc:	e054      	b.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fa20 	bl	8000b48 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fa1c 	bl	8000b48 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e045      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x444>
 800172a:	e03d      	b.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e038      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000
 8001740:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x4ec>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d028      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d121      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d11a      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001774:	4013      	ands	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800177a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800177c:	4293      	cmp	r3, r2
 800177e:	d111      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	085b      	lsrs	r3, r3, #1
 800178c:	3b01      	subs	r3, #1
 800178e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d107      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0cc      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d90c      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b65      	ldr	r3, [pc, #404]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0b8      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a58      	ldr	r2, [pc, #352]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001824:	4b53      	ldr	r3, [pc, #332]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a52      	ldr	r2, [pc, #328]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001830:	4b50      	ldr	r3, [pc, #320]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	494d      	ldr	r1, [pc, #308]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d044      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d119      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e07f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d003      	beq.n	8001876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001872:	2b03      	cmp	r3, #3
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e06f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e067      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001896:	4b37      	ldr	r3, [pc, #220]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f023 0203 	bic.w	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4934      	ldr	r1, [pc, #208]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a8:	f7ff f94e 	bl	8000b48 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b0:	f7ff f94a 	bl	8000b48 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e04f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 020c 	and.w	r2, r3, #12
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d1eb      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d20c      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e032      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4916      	ldr	r1, [pc, #88]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193e:	f000 f821 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001942:	4602      	mov	r2, r0
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	490a      	ldr	r1, [pc, #40]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	5ccb      	ldrb	r3, [r1, r3]
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f8ae 	bl	8000ac0 <HAL_InitTick>

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023c00 	.word	0x40023c00
 8001974:	40023800 	.word	0x40023800
 8001978:	0800258c 	.word	0x0800258c
 800197c:	2000007c 	.word	0x2000007c
 8001980:	20000080 	.word	0x20000080

08001984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001988:	b094      	sub	sp, #80	; 0x50
 800198a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
 8001990:	2300      	movs	r3, #0
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001994:	2300      	movs	r3, #0
 8001996:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199c:	4b79      	ldr	r3, [pc, #484]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d00d      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x40>
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	f200 80e1 	bhi.w	8001b70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x34>
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d003      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x3a>
 80019b6:	e0db      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019bc:	e0db      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019be:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x208>)
 80019c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019c2:	e0d8      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c4:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ce:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d063      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019da:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	099b      	lsrs	r3, r3, #6
 80019e0:	2200      	movs	r2, #0
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
 80019ee:	2300      	movs	r3, #0
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
 80019f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019f6:	4622      	mov	r2, r4
 80019f8:	462b      	mov	r3, r5
 80019fa:	f04f 0000 	mov.w	r0, #0
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	0159      	lsls	r1, r3, #5
 8001a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a08:	0150      	lsls	r0, r2, #5
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4621      	mov	r1, r4
 8001a10:	1a51      	subs	r1, r2, r1
 8001a12:	6139      	str	r1, [r7, #16]
 8001a14:	4629      	mov	r1, r5
 8001a16:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a28:	4659      	mov	r1, fp
 8001a2a:	018b      	lsls	r3, r1, #6
 8001a2c:	4651      	mov	r1, sl
 8001a2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a32:	4651      	mov	r1, sl
 8001a34:	018a      	lsls	r2, r1, #6
 8001a36:	4651      	mov	r1, sl
 8001a38:	ebb2 0801 	subs.w	r8, r2, r1
 8001a3c:	4659      	mov	r1, fp
 8001a3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a56:	4690      	mov	r8, r2
 8001a58:	4699      	mov	r9, r3
 8001a5a:	4623      	mov	r3, r4
 8001a5c:	eb18 0303 	adds.w	r3, r8, r3
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	462b      	mov	r3, r5
 8001a64:	eb49 0303 	adc.w	r3, r9, r3
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a76:	4629      	mov	r1, r5
 8001a78:	024b      	lsls	r3, r1, #9
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a80:	4621      	mov	r1, r4
 8001a82:	024a      	lsls	r2, r1, #9
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a94:	f7fe fbaa 	bl	80001ec <__aeabi_uldivmod>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa0:	e058      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	099b      	lsrs	r3, r3, #6
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	4611      	mov	r1, r2
 8001aae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001abc:	4642      	mov	r2, r8
 8001abe:	464b      	mov	r3, r9
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	0159      	lsls	r1, r3, #5
 8001aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ace:	0150      	lsls	r0, r2, #5
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4641      	mov	r1, r8
 8001ad6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ada:	4649      	mov	r1, r9
 8001adc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001af4:	ebb2 040a 	subs.w	r4, r2, sl
 8001af8:	eb63 050b 	sbc.w	r5, r3, fp
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	00eb      	lsls	r3, r5, #3
 8001b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b0a:	00e2      	lsls	r2, r4, #3
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	4643      	mov	r3, r8
 8001b12:	18e3      	adds	r3, r4, r3
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	464b      	mov	r3, r9
 8001b18:	eb45 0303 	adc.w	r3, r5, r3
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	028b      	lsls	r3, r1, #10
 8001b2e:	4621      	mov	r1, r4
 8001b30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b34:	4621      	mov	r1, r4
 8001b36:	028a      	lsls	r2, r1, #10
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	61fa      	str	r2, [r7, #28]
 8001b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b48:	f7fe fb50 	bl	80001ec <__aeabi_uldivmod>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4613      	mov	r3, r2
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6e:	e002      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3750      	adds	r7, #80	; 0x50
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	00f42400 	.word	0x00f42400
 8001b8c:	007a1200 	.word	0x007a1200

08001b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	2000007c 	.word	0x2000007c

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bac:	f7ff fff0 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0a9b      	lsrs	r3, r3, #10
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4903      	ldr	r1, [pc, #12]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	0800259c 	.word	0x0800259c

08001bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bd4:	f7ff ffdc 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	0b5b      	lsrs	r3, r3, #13
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4903      	ldr	r1, [pc, #12]	; (8001bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	0800259c 	.word	0x0800259c

08001bf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e03f      	b.n	8001c8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff faa8 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2224      	movs	r2, #36	; 0x24
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f929 	bl	8001e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695a      	ldr	r2, [r3, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2220      	movs	r2, #32
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b08a      	sub	sp, #40	; 0x28
 8001c96:	af02      	add	r7, sp, #8
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	d17c      	bne.n	8001dac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_UART_Transmit+0x2c>
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e075      	b.n	8001dae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_UART_Transmit+0x3e>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e06e      	b.n	8001dae <HAL_UART_Transmit+0x11c>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2221      	movs	r2, #33	; 0x21
 8001ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ce6:	f7fe ff2f 	bl	8000b48 <HAL_GetTick>
 8001cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	88fa      	ldrh	r2, [r7, #6]
 8001cf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	88fa      	ldrh	r2, [r7, #6]
 8001cf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d00:	d108      	bne.n	8001d14 <HAL_UART_Transmit+0x82>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d104      	bne.n	8001d14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	e003      	b.n	8001d1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d24:	e02a      	b.n	8001d7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2180      	movs	r1, #128	; 0x80
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f840 	bl	8001db6 <UART_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e036      	b.n	8001dae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10b      	bne.n	8001d5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	3302      	adds	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	e007      	b.n	8001d6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	781a      	ldrb	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1cf      	bne.n	8001d26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2140      	movs	r1, #64	; 0x40
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f810 	bl	8001db6 <UART_WaitOnFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e006      	b.n	8001dae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	e000      	b.n	8001dae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001dac:	2302      	movs	r3, #2
  }
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3720      	adds	r7, #32
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b090      	sub	sp, #64	; 0x40
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dc6:	e050      	b.n	8001e6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dce:	d04c      	beq.n	8001e6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001dd6:	f7fe feb7 	bl	8000b48 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d241      	bcs.n	8001e6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	330c      	adds	r3, #12
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df0:	e853 3f00 	ldrex	r3, [r3]
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	330c      	adds	r3, #12
 8001e04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e06:	637a      	str	r2, [r7, #52]	; 0x34
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e0e:	e841 2300 	strex	r3, r2, [r1]
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1e5      	bne.n	8001de6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3314      	adds	r3, #20
 8001e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	e853 3f00 	ldrex	r3, [r3]
 8001e28:	613b      	str	r3, [r7, #16]
   return(result);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3314      	adds	r3, #20
 8001e38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e3a:	623a      	str	r2, [r7, #32]
 8001e3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e3e:	69f9      	ldr	r1, [r7, #28]
 8001e40:	6a3a      	ldr	r2, [r7, #32]
 8001e42:	e841 2300 	strex	r3, r2, [r1]
 8001e46:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1e5      	bne.n	8001e1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e00f      	b.n	8001e8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4013      	ands	r3, r2
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	bf0c      	ite	eq
 8001e7a:	2301      	moveq	r3, #1
 8001e7c:	2300      	movne	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d09f      	beq.n	8001dc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3740      	adds	r7, #64	; 0x40
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e98:	b0c0      	sub	sp, #256	; 0x100
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb0:	68d9      	ldr	r1, [r3, #12]
 8001eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	ea40 0301 	orr.w	r3, r0, r1
 8001ebc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001eec:	f021 010c 	bic.w	r1, r1, #12
 8001ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001efa:	430b      	orrs	r3, r1
 8001efc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f0e:	6999      	ldr	r1, [r3, #24]
 8001f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	ea40 0301 	orr.w	r3, r0, r1
 8001f1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b8f      	ldr	r3, [pc, #572]	; (8002160 <UART_SetConfig+0x2cc>)
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d005      	beq.n	8001f34 <UART_SetConfig+0xa0>
 8001f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b8d      	ldr	r3, [pc, #564]	; (8002164 <UART_SetConfig+0x2d0>)
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d104      	bne.n	8001f3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f34:	f7ff fe4c 	bl	8001bd0 <HAL_RCC_GetPCLK2Freq>
 8001f38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f3c:	e003      	b.n	8001f46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f3e:	f7ff fe33 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8001f42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f50:	f040 810c 	bne.w	800216c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f66:	4622      	mov	r2, r4
 8001f68:	462b      	mov	r3, r5
 8001f6a:	1891      	adds	r1, r2, r2
 8001f6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f6e:	415b      	adcs	r3, r3
 8001f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f76:	4621      	mov	r1, r4
 8001f78:	eb12 0801 	adds.w	r8, r2, r1
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	eb43 0901 	adc.w	r9, r3, r1
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f96:	4690      	mov	r8, r2
 8001f98:	4699      	mov	r9, r3
 8001f9a:	4623      	mov	r3, r4
 8001f9c:	eb18 0303 	adds.w	r3, r8, r3
 8001fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001fa4:	462b      	mov	r3, r5
 8001fa6:	eb49 0303 	adc.w	r3, r9, r3
 8001faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001fbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	18db      	adds	r3, r3, r3
 8001fc6:	653b      	str	r3, [r7, #80]	; 0x50
 8001fc8:	4613      	mov	r3, r2
 8001fca:	eb42 0303 	adc.w	r3, r2, r3
 8001fce:	657b      	str	r3, [r7, #84]	; 0x54
 8001fd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001fd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001fd8:	f7fe f908 	bl	80001ec <__aeabi_uldivmod>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4b61      	ldr	r3, [pc, #388]	; (8002168 <UART_SetConfig+0x2d4>)
 8001fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	011c      	lsls	r4, r3, #4
 8001fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ff4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ff8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ffc:	4642      	mov	r2, r8
 8001ffe:	464b      	mov	r3, r9
 8002000:	1891      	adds	r1, r2, r2
 8002002:	64b9      	str	r1, [r7, #72]	; 0x48
 8002004:	415b      	adcs	r3, r3
 8002006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002008:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800200c:	4641      	mov	r1, r8
 800200e:	eb12 0a01 	adds.w	sl, r2, r1
 8002012:	4649      	mov	r1, r9
 8002014:	eb43 0b01 	adc.w	fp, r3, r1
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002024:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800202c:	4692      	mov	sl, r2
 800202e:	469b      	mov	fp, r3
 8002030:	4643      	mov	r3, r8
 8002032:	eb1a 0303 	adds.w	r3, sl, r3
 8002036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800203a:	464b      	mov	r3, r9
 800203c:	eb4b 0303 	adc.w	r3, fp, r3
 8002040:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002050:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002054:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002058:	460b      	mov	r3, r1
 800205a:	18db      	adds	r3, r3, r3
 800205c:	643b      	str	r3, [r7, #64]	; 0x40
 800205e:	4613      	mov	r3, r2
 8002060:	eb42 0303 	adc.w	r3, r2, r3
 8002064:	647b      	str	r3, [r7, #68]	; 0x44
 8002066:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800206a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800206e:	f7fe f8bd 	bl	80001ec <__aeabi_uldivmod>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4611      	mov	r1, r2
 8002078:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <UART_SetConfig+0x2d4>)
 800207a:	fba3 2301 	umull	r2, r3, r3, r1
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2264      	movs	r2, #100	; 0x64
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	1acb      	subs	r3, r1, r3
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800208e:	4b36      	ldr	r3, [pc, #216]	; (8002168 <UART_SetConfig+0x2d4>)
 8002090:	fba3 2302 	umull	r2, r3, r3, r2
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800209c:	441c      	add	r4, r3
 800209e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020a2:	2200      	movs	r2, #0
 80020a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80020ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80020b0:	4642      	mov	r2, r8
 80020b2:	464b      	mov	r3, r9
 80020b4:	1891      	adds	r1, r2, r2
 80020b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80020b8:	415b      	adcs	r3, r3
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020c0:	4641      	mov	r1, r8
 80020c2:	1851      	adds	r1, r2, r1
 80020c4:	6339      	str	r1, [r7, #48]	; 0x30
 80020c6:	4649      	mov	r1, r9
 80020c8:	414b      	adcs	r3, r1
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80020d8:	4659      	mov	r1, fp
 80020da:	00cb      	lsls	r3, r1, #3
 80020dc:	4651      	mov	r1, sl
 80020de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020e2:	4651      	mov	r1, sl
 80020e4:	00ca      	lsls	r2, r1, #3
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	4642      	mov	r2, r8
 80020ee:	189b      	adds	r3, r3, r2
 80020f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020f4:	464b      	mov	r3, r9
 80020f6:	460a      	mov	r2, r1
 80020f8:	eb42 0303 	adc.w	r3, r2, r3
 80020fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800210c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002110:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002114:	460b      	mov	r3, r1
 8002116:	18db      	adds	r3, r3, r3
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
 800211a:	4613      	mov	r3, r2
 800211c:	eb42 0303 	adc.w	r3, r2, r3
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002126:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800212a:	f7fe f85f 	bl	80001ec <__aeabi_uldivmod>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <UART_SetConfig+0x2d4>)
 8002134:	fba3 1302 	umull	r1, r3, r3, r2
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	2164      	movs	r1, #100	; 0x64
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	3332      	adds	r3, #50	; 0x32
 8002146:	4a08      	ldr	r2, [pc, #32]	; (8002168 <UART_SetConfig+0x2d4>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	f003 0207 	and.w	r2, r3, #7
 8002152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4422      	add	r2, r4
 800215a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800215c:	e106      	b.n	800236c <UART_SetConfig+0x4d8>
 800215e:	bf00      	nop
 8002160:	40011000 	.word	0x40011000
 8002164:	40011400 	.word	0x40011400
 8002168:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800216c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002170:	2200      	movs	r2, #0
 8002172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002176:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800217a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800217e:	4642      	mov	r2, r8
 8002180:	464b      	mov	r3, r9
 8002182:	1891      	adds	r1, r2, r2
 8002184:	6239      	str	r1, [r7, #32]
 8002186:	415b      	adcs	r3, r3
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
 800218a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800218e:	4641      	mov	r1, r8
 8002190:	1854      	adds	r4, r2, r1
 8002192:	4649      	mov	r1, r9
 8002194:	eb43 0501 	adc.w	r5, r3, r1
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	00eb      	lsls	r3, r5, #3
 80021a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021a6:	00e2      	lsls	r2, r4, #3
 80021a8:	4614      	mov	r4, r2
 80021aa:	461d      	mov	r5, r3
 80021ac:	4643      	mov	r3, r8
 80021ae:	18e3      	adds	r3, r4, r3
 80021b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021b4:	464b      	mov	r3, r9
 80021b6:	eb45 0303 	adc.w	r3, r5, r3
 80021ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021da:	4629      	mov	r1, r5
 80021dc:	008b      	lsls	r3, r1, #2
 80021de:	4621      	mov	r1, r4
 80021e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021e4:	4621      	mov	r1, r4
 80021e6:	008a      	lsls	r2, r1, #2
 80021e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80021ec:	f7fd fffe 	bl	80001ec <__aeabi_uldivmod>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4b60      	ldr	r3, [pc, #384]	; (8002378 <UART_SetConfig+0x4e4>)
 80021f6:	fba3 2302 	umull	r2, r3, r3, r2
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	011c      	lsls	r4, r3, #4
 80021fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002202:	2200      	movs	r2, #0
 8002204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002208:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800220c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002210:	4642      	mov	r2, r8
 8002212:	464b      	mov	r3, r9
 8002214:	1891      	adds	r1, r2, r2
 8002216:	61b9      	str	r1, [r7, #24]
 8002218:	415b      	adcs	r3, r3
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002220:	4641      	mov	r1, r8
 8002222:	1851      	adds	r1, r2, r1
 8002224:	6139      	str	r1, [r7, #16]
 8002226:	4649      	mov	r1, r9
 8002228:	414b      	adcs	r3, r1
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002238:	4659      	mov	r1, fp
 800223a:	00cb      	lsls	r3, r1, #3
 800223c:	4651      	mov	r1, sl
 800223e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002242:	4651      	mov	r1, sl
 8002244:	00ca      	lsls	r2, r1, #3
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	4603      	mov	r3, r0
 800224c:	4642      	mov	r2, r8
 800224e:	189b      	adds	r3, r3, r2
 8002250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002254:	464b      	mov	r3, r9
 8002256:	460a      	mov	r2, r1
 8002258:	eb42 0303 	adc.w	r3, r2, r3
 800225c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	67bb      	str	r3, [r7, #120]	; 0x78
 800226a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002278:	4649      	mov	r1, r9
 800227a:	008b      	lsls	r3, r1, #2
 800227c:	4641      	mov	r1, r8
 800227e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002282:	4641      	mov	r1, r8
 8002284:	008a      	lsls	r2, r1, #2
 8002286:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800228a:	f7fd ffaf 	bl	80001ec <__aeabi_uldivmod>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4611      	mov	r1, r2
 8002294:	4b38      	ldr	r3, [pc, #224]	; (8002378 <UART_SetConfig+0x4e4>)
 8002296:	fba3 2301 	umull	r2, r3, r3, r1
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2264      	movs	r2, #100	; 0x64
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	1acb      	subs	r3, r1, r3
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	3332      	adds	r3, #50	; 0x32
 80022a8:	4a33      	ldr	r2, [pc, #204]	; (8002378 <UART_SetConfig+0x4e4>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b4:	441c      	add	r4, r3
 80022b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ba:	2200      	movs	r2, #0
 80022bc:	673b      	str	r3, [r7, #112]	; 0x70
 80022be:	677a      	str	r2, [r7, #116]	; 0x74
 80022c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80022c4:	4642      	mov	r2, r8
 80022c6:	464b      	mov	r3, r9
 80022c8:	1891      	adds	r1, r2, r2
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	415b      	adcs	r3, r3
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022d4:	4641      	mov	r1, r8
 80022d6:	1851      	adds	r1, r2, r1
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	4649      	mov	r1, r9
 80022dc:	414b      	adcs	r3, r1
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022ec:	4659      	mov	r1, fp
 80022ee:	00cb      	lsls	r3, r1, #3
 80022f0:	4651      	mov	r1, sl
 80022f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022f6:	4651      	mov	r1, sl
 80022f8:	00ca      	lsls	r2, r1, #3
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	4642      	mov	r2, r8
 8002302:	189b      	adds	r3, r3, r2
 8002304:	66bb      	str	r3, [r7, #104]	; 0x68
 8002306:	464b      	mov	r3, r9
 8002308:	460a      	mov	r2, r1
 800230a:	eb42 0303 	adc.w	r3, r2, r3
 800230e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	663b      	str	r3, [r7, #96]	; 0x60
 800231a:	667a      	str	r2, [r7, #100]	; 0x64
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002328:	4649      	mov	r1, r9
 800232a:	008b      	lsls	r3, r1, #2
 800232c:	4641      	mov	r1, r8
 800232e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002332:	4641      	mov	r1, r8
 8002334:	008a      	lsls	r2, r1, #2
 8002336:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800233a:	f7fd ff57 	bl	80001ec <__aeabi_uldivmod>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <UART_SetConfig+0x4e4>)
 8002344:	fba3 1302 	umull	r1, r3, r3, r2
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	2164      	movs	r1, #100	; 0x64
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	3332      	adds	r3, #50	; 0x32
 8002356:	4a08      	ldr	r2, [pc, #32]	; (8002378 <UART_SetConfig+0x4e4>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	f003 020f 	and.w	r2, r3, #15
 8002362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4422      	add	r2, r4
 800236a:	609a      	str	r2, [r3, #8]
}
 800236c:	bf00      	nop
 800236e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002372:	46bd      	mov	sp, r7
 8002374:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002378:	51eb851f 	.word	0x51eb851f

0800237c <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
	delay_t timer_LED1;
	uint8_t index_blink_timers = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 8002386:	f7fe fb7f 	bl	8000a88 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 800238a:	f000 f839 	bl	8002400 <SystemClock_Config>

	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED1);
 800238e:	2000      	movs	r0, #0
 8002390:	f7fe fa26 	bl	80007e0 <BSP_LED_Init>

	/* Initialize blink timer for LED1 */
	delay_init(&timer_LED1, blink_timers[index_blink_timers]);
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <main+0x7c>)
 8002398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800239c:	463b      	mov	r3, r7
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f962 	bl	800066a <delay_init>

	/* Initialize FSM debounce */
	debounce_FSM_init(DEBOUNCE_TIME);
 80023a6:	2028      	movs	r0, #40	; 0x28
 80023a8:	f7fe f89e 	bl	80004e8 <debounce_FSM_init>

	/* Infinite loop */
	while (1) {

		debounce_FSM_update();
 80023ac:	f7fe f8ce 	bl	800054c <debounce_FSM_update>

		if (read_key()) {
 80023b0:	f7fe f93a 	bl	8000628 <read_key>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d012      	beq.n	80023e0 <main+0x64>
			if (++index_blink_timers == size_blink_timers) {
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	3301      	adds	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <main+0x80>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d101      	bne.n	80023ce <main+0x52>
				index_blink_timers = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
			}

			delay_write(&timer_LED1,blink_timers[index_blink_timers]);
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <main+0x7c>)
 80023d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023d6:	463b      	mov	r3, r7
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe f993 	bl	8000706 <delay_write>
		}

	  	if (delay_read(&timer_LED1)) {
 80023e0:	463b      	mov	r3, r7
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe f95c 	bl	80006a0 <delay_read>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0de      	beq.n	80023ac <main+0x30>
	  		BSP_LED_Toggle(LED1);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe fa60 	bl	80008b4 <BSP_LED_Toggle>
		debounce_FSM_update();
 80023f4:	e7da      	b.n	80023ac <main+0x30>
 80023f6:	bf00      	nop
 80023f8:	20000088 	.word	0x20000088
 80023fc:	20000090 	.word	0x20000090

08002400 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b094      	sub	sp, #80	; 0x50
 8002404:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	4b2c      	ldr	r3, [pc, #176]	; (80024bc <SystemClock_Config+0xbc>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	4a2b      	ldr	r2, [pc, #172]	; (80024bc <SystemClock_Config+0xbc>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002414:	6413      	str	r3, [r2, #64]	; 0x40
 8002416:	4b29      	ldr	r3, [pc, #164]	; (80024bc <SystemClock_Config+0xbc>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <SystemClock_Config+0xc0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a25      	ldr	r2, [pc, #148]	; (80024c0 <SystemClock_Config+0xc0>)
 800242c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <SystemClock_Config+0xc0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800243e:	2301      	movs	r3, #1
 8002440:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002442:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002446:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002448:	2302      	movs	r3, #2
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800244c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002452:	2308      	movs	r3, #8
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8002456:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800245c:	2302      	movs	r3, #2
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002460:	2307      	movs	r3, #7
 8002462:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe ff2d 	bl	80012c8 <HAL_RCC_OscConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8002474:	f000 f826 	bl	80024c4 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002478:	f7fe fed6 	bl	8001228 <HAL_PWREx_EnableOverDrive>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8002482:	f000 f81f 	bl	80024c4 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002486:	230f      	movs	r3, #15
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800248a:	2302      	movs	r3, #2
 800248c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800248e:	2300      	movs	r3, #0
 8002490:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002492:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002496:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800249c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800249e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024a2:	2105      	movs	r1, #5
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff f987 	bl	80017b8 <HAL_RCC_ClockConfig>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 80024b0:	f000 f808 	bl	80024c4 <Error_Handler>
	}
}
 80024b4:	bf00      	nop
 80024b6:	3750      	adds	r7, #80	; 0x50
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40007000 	.word	0x40007000

080024c4 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 80024c8:	2001      	movs	r0, #1
 80024ca:	f7fe f9d9 	bl	8000880 <BSP_LED_On>
	while (1)
 80024ce:	e7fe      	b.n	80024ce <Error_Handler+0xa>

080024d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80024d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002508 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024d6:	e003      	b.n	80024e0 <LoopCopyDataInit>

080024d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024de:	3104      	adds	r1, #4

080024e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024e0:	480b      	ldr	r0, [pc, #44]	; (8002510 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024e8:	d3f6      	bcc.n	80024d8 <CopyDataInit>
  ldr  r2, =_sbss
 80024ea:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024ec:	e002      	b.n	80024f4 <LoopFillZerobss>

080024ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024f0:	f842 3b04 	str.w	r3, [r2], #4

080024f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024f8:	d3f9      	bcc.n	80024ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024fa:	f7fe fa61 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024fe:	f000 f811 	bl	8002524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002502:	f7ff ff3b 	bl	800237c <main>
  bx  lr    
 8002506:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002508:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800250c:	080025b4 	.word	0x080025b4
  ldr  r0, =_sdata
 8002510:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002514:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8002518:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800251c:	20000110 	.word	0x20000110

08002520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002520:	e7fe      	b.n	8002520 <ADC_IRQHandler>
	...

08002524 <__libc_init_array>:
 8002524:	b570      	push	{r4, r5, r6, lr}
 8002526:	4d0d      	ldr	r5, [pc, #52]	; (800255c <__libc_init_array+0x38>)
 8002528:	4c0d      	ldr	r4, [pc, #52]	; (8002560 <__libc_init_array+0x3c>)
 800252a:	1b64      	subs	r4, r4, r5
 800252c:	10a4      	asrs	r4, r4, #2
 800252e:	2600      	movs	r6, #0
 8002530:	42a6      	cmp	r6, r4
 8002532:	d109      	bne.n	8002548 <__libc_init_array+0x24>
 8002534:	4d0b      	ldr	r5, [pc, #44]	; (8002564 <__libc_init_array+0x40>)
 8002536:	4c0c      	ldr	r4, [pc, #48]	; (8002568 <__libc_init_array+0x44>)
 8002538:	f000 f818 	bl	800256c <_init>
 800253c:	1b64      	subs	r4, r4, r5
 800253e:	10a4      	asrs	r4, r4, #2
 8002540:	2600      	movs	r6, #0
 8002542:	42a6      	cmp	r6, r4
 8002544:	d105      	bne.n	8002552 <__libc_init_array+0x2e>
 8002546:	bd70      	pop	{r4, r5, r6, pc}
 8002548:	f855 3b04 	ldr.w	r3, [r5], #4
 800254c:	4798      	blx	r3
 800254e:	3601      	adds	r6, #1
 8002550:	e7ee      	b.n	8002530 <__libc_init_array+0xc>
 8002552:	f855 3b04 	ldr.w	r3, [r5], #4
 8002556:	4798      	blx	r3
 8002558:	3601      	adds	r6, #1
 800255a:	e7f2      	b.n	8002542 <__libc_init_array+0x1e>
 800255c:	080025ac 	.word	0x080025ac
 8002560:	080025ac 	.word	0x080025ac
 8002564:	080025ac 	.word	0x080025ac
 8002568:	080025b0 	.word	0x080025b0

0800256c <_init>:
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256e:	bf00      	nop
 8002570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002572:	bc08      	pop	{r3}
 8002574:	469e      	mov	lr, r3
 8002576:	4770      	bx	lr

08002578 <_fini>:
 8002578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257a:	bf00      	nop
 800257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257e:	bc08      	pop	{r3}
 8002580:	469e      	mov	lr, r3
 8002582:	4770      	bx	lr
